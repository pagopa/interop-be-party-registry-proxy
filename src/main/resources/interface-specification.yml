openapi: 3.0.3
info:
  title: Party Registry Proxy Server
  description: This service is the proxy to the party registry
  version: '{{version}}'
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  termsOfService: http://localhost/terms
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: '/party-registry-proxy/{{version}}'
    description: This service is the proxy to the party registry
security:
  - bearerAuth: [ ]
tags:
  - name: institution
    description: Retrieve information about institution
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: category
    description: Retrieve information about category
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /institutions/{institutionId}:
    get:
      tags:
        - institution
      summary: Find institution by ID
      description: Returns a single institution
      operationId: getInstitutionById
      parameters:
        - name: institutionId
          in: path
          description: ID of institution to return
          required: true
          schema:
            type: string
            maxLength: 32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        '404':
          description: Institution not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /institutions:
    get:
      tags:
        - institution
      summary: Find institutions
      description: | 
        Returns a list of Institutions.
      operationId: searchInstitutions
      parameters:
        - in: query
          name: search
          description: if passed, the result is filtered based on the contained value.
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institutions'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /categories:
    get:
      tags:
        - category
      summary: Get all categories
      description: Returns the categories list
      operationId: getCategories
      parameters:
        - name: origin
          in: query
          description: category origin
          schema:
            type: string
            maxLength: 32
        - in: query
          name: page
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /origins/{origin}/categories/{code}:
    get:
      tags:
        - category
      summary: Get an category
      description: Returns a category
      operationId: getCategory
      parameters:
        - name: origin
          in: path
          description: category origin
          required: true
          schema:
            type: string
            maxLength: 32
        - name: code
          in: path
          description: ID of category to return
          required: true
          schema:
            type: string
            maxLength: 32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid code supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Category not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /status:
    get:
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        '200':
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  schemas:
    Institution:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: semantic id to recognize a party between origins (or externalId)
          example: age
          maxLength: 32
        originId:
          type: string
          description: id of the institution from its origin (IPAcode in case of origin IPA)
          example: age
          pattern: '^[a-z]{1,12}$'
          maxLength: 12
        o:
          type: string
          description: o
          example: age
          pattern: '^[a-z]{1,12}$'
          maxLength: 12
        ou:
          type: string
          description: ou
          example: age
          pattern: '^[a-z]{1,12}$'
          maxLength: 12
        aoo:
          type: string
          description: aoo
          example: age
          pattern: '^[a-z]{1,12}$'
          maxLength: 12
        taxCode:
          type: string
          description: institution fiscal code
          example: '00000000000'
          pattern: '[\d]{10,13}'
          maxLength: 13
        category:
          type: string
          description: institution category
          example: 'c7'
          pattern: '[a-zA-Z\d]{1,12}'
          maxLength: 13
        description:
          type: string
          description: institution description
          example: AGENCY X
          format: '^[A-Za-z èàòùìÈÀÒÙÌ]{2,30}$'
          maxLength: 30
        digitalAddress:
          type: string
          description: digital institution address
          example: mail@pec.mail.org
          format: mail
          maxLength: 20
        address:
          type: string
          description: Institution address
        zipCode:
          type: string
          description: Institution zipCode
        origin:
          type: string
          description: describes which is the source of Institution data
      required:
        - id
        - originId
        - category
        - taxCode
        - digitalAddress
        - description
        - address
        - zipCode
        - origin
    Institutions:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Institution'
        totalCount:
          type: integer
          format: int64
      required:
        - items
        - totalCount
    Category:
      type: object
      additionalProperties: false
      properties:
        code:
          type: string
        name:
          type: string
        kind:
          type: string
        origin:
          type: string
      required:
        - code
        - kind
        - name
        - origin
    Categories:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        totalCount:
          type: integer
          format: int64
      required:
        - items
        - totalCount
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{3}-[0-9]{4}$'
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
      required:
        - code
        - detail
  securitySchemes:
    bearerAuth:
      type: http
      description: A bearer token in the format of a JWS and comformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).
      scheme: bearer
      bearerFormat: JWT
